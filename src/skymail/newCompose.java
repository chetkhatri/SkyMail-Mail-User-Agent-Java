/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package skymail;

import java.awt.event.ItemEvent;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.mail.*;
import javax.mail.internet.*;
import java.util.*;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;


/**
 *
 * @author chetan
 */
public class newCompose extends javax.swing.JFrame {

    /**
     * Creates new form newCompose
     */
    module ml=new module();
   
   
    String[] strAttach;
    String[] recipient;
    
    String subject;
    String message;
    String from;
    
    String emailcc;
    String emailbcc;
    
    String MAIL_ID;
    String MAIL_PWD;
    
    String name;
    int portno;
    String host;
    
    Statement st;
    ResultSet rs;
    public newCompose() {
        initComponents();
        txtCc.setEnabled(false);
        txtBcc.setEnabled(false);
        ml.conn();
        ml.populateMail(cmbMail);
        ml.setDefAcc(cmbMail);
        fetchCredential();
        jScrollPane2.setEnabled(false);
        txtAttachment.setEnabled(false);
        setSize(799, 519);
        txtTo.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSend = new javax.swing.JButton();
        btnAttach = new javax.swing.JButton();
        btnDraft = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMsg = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        cmbMail = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cmbPriority = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        txtTo = new javax.swing.JTextField();
        txtCc = new javax.swing.JTextField();
        txtBcc = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtSub = new javax.swing.JTextField();
        tbtnCC = new javax.swing.JToggleButton();
        tbtnBcc = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAttachment = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SkyMail - Compose New Mail");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnSend.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/send.png"))); // NOI18N
        btnSend.setText("Send Mail");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        btnAttach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Attach.png"))); // NOI18N
        btnAttach.setText("Attachment");
        btnAttach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAttachActionPerformed(evt);
            }
        });

        btnDraft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/draft.png"))); // NOI18N
        btnDraft.setText("Save as Draft");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtMsg.setColumns(20);
        txtMsg.setRows(5);
        jScrollPane1.setViewportView(txtMsg);

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel1.setText("Identity:");

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel2.setText("Priority:");

        cmbPriority.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Highest", "High", "Normal", "Low", "Lowest" }));

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel3.setText("To:");

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel4.setText("Subject:");

        tbtnCC.setText("CC");
        tbtnCC.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tbtnCCItemStateChanged(evt);
            }
        });

        tbtnBcc.setText("BCC");
        tbtnBcc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tbtnBccItemStateChanged(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txtAttachment.setColumns(20);
        txtAttachment.setRows(5);
        jScrollPane2.setViewportView(txtAttachment);

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        jLabel5.setText("Attachments :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)))
                    .addComponent(tbtnCC)
                    .addComponent(tbtnBcc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtSub, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCc, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBcc, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbMail, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(cmbPriority, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(62, 62, 62))
            .addComponent(jScrollPane1)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnSend)
                        .addGap(18, 18, 18)
                        .addComponent(btnDraft)
                        .addGap(18, 18, 18)
                        .addComponent(btnAttach))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {tbtnBcc, tbtnCC});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAttach, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDraft, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbMail, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cmbPriority, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCc, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbtnCC, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBcc, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbtnBcc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSub, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtBcc, txtCc, txtSub, txtTo});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tbtnCCItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tbtnCCItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()== ItemEvent.SELECTED)
        {
            txtCc.setEnabled(true);
        }
        else
        {
            txtCc.setEnabled(false);
        }
    }//GEN-LAST:event_tbtnCCItemStateChanged

    private void fetchCredential()
    {
        try
        {
            
        st=ml.con.createStatement();
        rs=st.executeQuery("select * from dbskymail.tbaccount where status="+ 1 +"");
        rs.last();
        MAIL_ID=rs.getString("acc_mail");
        MAIL_PWD=rs.getString("acc_pwd");
        name=rs.getString("acc_name");
        host=rs.getString("acc_outhost");
        portno=rs.getInt("outport");
        
        
        
        }catch(Exception ex){}
    }
    
    private void tbtnBccItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tbtnBccItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()== ItemEvent.SELECTED)
        {
            txtBcc.setEnabled(true);
        }
        else
        {
           txtBcc.setEnabled(false);
        }
    }//GEN-LAST:event_tbtnBccItemStateChanged

    private void btnAttachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAttachActionPerformed
        // TODO add your handling code here:
        try
        {
            JFileChooser selectFile = new JFileChooser();
            selectFile.showOpenDialog(this);
            
            jScrollPane2.setEnabled(true);
            txtAttachment.setEnabled(true);
            if(txtAttachment.getText().equals(""))
            {
                txtAttachment.setText(txtAttachment.getText()+selectFile.getSelectedFile().toString());
            }
            else
            {
                txtAttachment.setText(txtAttachment.getText()+",\n"+selectFile.getSelectedFile().toString());
            }
            setSize(799, 630);
       
        
        }catch(Exception ex)
        {}
       
    }//GEN-LAST:event_btnAttachActionPerformed

    
    
    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        
        
        if(cmbMail.getSelectedItem().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please Select Your Email");
        }
        else if(txtTo.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please Enter Recipient Address");
            txtTo.requestFocus();
        }
        else if(txtSub.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please Enter Subject");
            txtSub.requestFocus();
        }
        else
        {
          try{
           
            ArrayList al=new ArrayList();
            StringTokenizer st=new StringTokenizer(txtTo.getText().toString(),",");
            while(st.hasMoreTokens())
            {
               al.add(st.nextElement());
            }
          recipient=new String[al.size()];
           al.toArray(recipient);
           
           
            
//           if(!txtAttachment.getText().equals(""))
//           {
//            strAttach = txtAttachment.getText().trim().split(",");   
//           }
           
           ArrayList ak=new ArrayList();
           StringTokenizer sk=new StringTokenizer(txtAttachment.getText(), ",\n");
           while(sk.hasMoreTokens())
           {
               ak.add(sk.nextElement());
           }
       
           strAttach=new String[ak.size()];
           ak.toArray(strAttach);
        
           
       
           subject=txtSub.getText().toString();
           message=txtMsg.getText().toString();
           from=MAIL_ID;
           
           
           
        
           
          newCompose nc=new newCompose();
           
//           nc.postMail(txtTo.getText().toString(), subject, message, from);
          
         
        }catch(Exception ex){
        System.out.println(ex);
        }  
       sendMail(recipient,subject , message, from, txtCc.getText().toString(), txtBcc.getText().toString(), name,portno,host,cmbPriority.getSelectedItem().toString(),strAttach);  
        }
        
       
    }//GEN-LAST:event_btnSendActionPerformed
    protected void sendMail(String[] recipient, String subject, String message , String from , String emailcc , String emailbcc ,String name, int portno , String host,String Priority,String[] attchFiles) 
   {
       try
       {
           Properties pros=new Properties();
           pros.put("mail.smtp.host",host);
           pros.put("mail.smtp.auth",true);
//           pros.put("mail.smtp.port", portno);
//           pros.put("mail.smtp.socketFactory.port",portno);
//           pros.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
           Authenticator auth=new SMTPAuthenticator();
           Session session=Session.getInstance(pros,auth);
           Message msg=new MimeMessage(session);
           InternetAddress addressFrom=new InternetAddress(from, name);
           msg.setFrom(addressFrom);
           //setting Sent Date
           msg.setSentDate(new java.util.Date());
          
           
          InternetAddress[] addressTo=new InternetAddress[recipient.length];
          for(int i=0;i<recipient.length;i++)
          {
              addressTo[i]=new InternetAddress(recipient[i]);
          }
           msg.setRecipients(Message.RecipientType.TO, addressTo);

           //           InternetAddress addressTo=new InternetAddress(recipient);
//           msg.setRecipient(Message.RecipientType.TO, addressTo);
           
           
           
           if(!emailcc.equals(""))
           {
               InternetAddress addressCC=new InternetAddress(emailcc);
               msg.setRecipient(Message.RecipientType.CC, addressCC);
           }
           else if(!emailbcc.equals(""))
           {
               InternetAddress addressBCC=new InternetAddress(emailbcc);
               msg.setRecipient(Message.RecipientType.BCC, addressBCC);
           }
           
           
           
           
           msg.setSubject(subject);
           
           
           switch(Priority)
           {
               case "Highest":
               msg.setHeader("X-Priority", "1");
               break;
               
               case "High":
               msg.setHeader("X-Priority", "2");
               break;
                   
               case "Normal":
               msg.setHeader("X-Priority", "3");
               break;
                   
               case "Low":
               msg.setHeader("X-Priority", "4");
               break;
                   
               case "Lowest":
               msg.setHeader("X-Priority", "5");
               break;    
                   
               
                   
                   
           }
          
               
           if(attchFiles!=null && attchFiles.length > 0)
           {
             MimeBodyPart messageBodyPart = new MimeBodyPart();
               messageBodyPart.setContent(message, "text/html");
               
               Multipart multipart = new MimeMultipart();
               multipart.addBodyPart(messageBodyPart);
                
               
              for (String filePath : attchFiles) {
                
 
                try {
                    MimeBodyPart attachPart = new MimeBodyPart();
                    attachPart.attachFile(filePath);
                    multipart.addBodyPart(attachPart);
                } catch (IOException ex) {
                    ex.printStackTrace();
                    
                }
 
                
            }
               msg.setContent(multipart);
               
              System.out.println("Attachment");
        
           }
           else
           {   System.out.println("Plain");
               msg.setContent(message, "text/plain");
           }
           
           Transport.send(msg);
           
           
           
           JOptionPane.showMessageDialog(null, "Sent!");
           
           
           
       }
       catch(UnsupportedEncodingException | MessagingException e)
       {
           if(ml.checkInternet()==false)
           {
               JOptionPane.showMessageDialog(null, "Please Connect Internet","Error",JOptionPane.ERROR_MESSAGE);
           }
           else if(ml.checkInternet()==true)
           {
                JOptionPane.showMessageDialog(null, "Invalid Host Name","Error",JOptionPane.ERROR_MESSAGE);
           }
           
       }
       catch(Exception ex)
       {
           JOptionPane.showMessageDialog(null, ex);
       }
       
   }
    public void postMail(String recipient, String subject, String message , String from) throws Exception
  {
	Properties props = new Properties();
        props.put("mail.smtp.host",host);
        props.put("mail.smtp.auth", "true");
	Authenticator auth = new SMTPAuthenticator();
        Session session = Session.getDefaultInstance(props, auth);
	Message msg = new MimeMessage(session);
	InternetAddress addressFrom = new InternetAddress(from,name);
        msg.setFrom(addressFrom);
	InternetAddress addressTo = new InternetAddress(recipient);
        msg.setRecipient(Message.RecipientType.TO, addressTo);
        
	msg.setSubject(subject);
        msg.setContent(message, "text/plain");
        Transport.send(msg);
        JOptionPane.showMessageDialog(null, "Sent!");
    
 }
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        cmbPriority.setSelectedIndex(2);
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(newCompose.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(newCompose.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(newCompose.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(newCompose.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new newCompose().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAttach;
    private javax.swing.JButton btnDraft;
    private javax.swing.JButton btnSend;
    private javax.swing.JComboBox cmbMail;
    private javax.swing.JComboBox cmbPriority;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToggleButton tbtnBcc;
    private javax.swing.JToggleButton tbtnCC;
    private javax.swing.JTextArea txtAttachment;
    private javax.swing.JTextField txtBcc;
    private javax.swing.JTextField txtCc;
    protected javax.swing.JTextArea txtMsg;
    protected javax.swing.JTextField txtSub;
    protected javax.swing.JTextField txtTo;
    // End of variables declaration//GEN-END:variables
private class SMTPAuthenticator extends javax.mail.Authenticator
{
    @Override
    public PasswordAuthentication getPasswordAuthentication()
    {
        String username = MAIL_ID;
        String password = MAIL_PWD;
        return new PasswordAuthentication(username, password);
    }
}
}
